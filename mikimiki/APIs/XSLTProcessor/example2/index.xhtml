<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Title</title>
</head>
<body>
<div id="example">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
  <div>8</div>
  <div>9</div>
  <div>10</div>
  <div>7</div>

</div>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded",function () {
    var xslRef;
    var xslloaded = false;
    var xsltProcessor = new XSLTProcessor();
    var myDOM;

    var xmlRef = document.implementation.createDocument("", "", null);

    function sort() {
      if (!xslloaded) {
        p = new XMLHttpRequest();
        p.open("GET", "example2.xsl", false);
        p.send(null);

        xslRef = p.responseXML;
        xsltProcessor.importStylesheet(xslRef);
        xslloaded = true;
      }

// create a new XML document in memory
      xmlRef = document.implementation.createDocument("", "", null);
// we want to move a part of the DOM from an HTML document to an XML document.
// importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone
      var myNode = document.getElementById("example");
      var clonedNode = xmlRef.importNode(myNode, true);

// after cloning, we append
      xmlRef.appendChild(clonedNode);
      console.log(xmlRef);
// set the sorting parameter in the XSL file
      var sortVal = xsltProcessor.getParameter("http://www.w3.org/1999/XSL/Transform", "myOrder");
      console.log(sortVal);
      if (sortVal == "" || sortVal == "descending")
        xsltProcessor.setParameter("http://www.w3.org/1999/XSL/Transform", "myOrder", "ascending");
      else
        xsltProcessor.setParameter("http://www.w3.org/1999/XSL/Transform", "myOrder", "descending");
      console.log(xsltProcessor);

// initiate the transformation
      var fragment = xsltProcessor.transformToFragment(xmlRef, document);
      console.log(fragment.children);

// clear the contents
      document.getElementById("example").textContent = "";

      myDOM = fragment;
// add the new content from the transformation
      document.getElementById("example").appendChild(fragment)
    }
    sort();
    sort();

  });
</script>
</body>
</html>